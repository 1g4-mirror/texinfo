.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Locale::RecodeData 3pm"
.TH Locale::RecodeData 3pm "2018-10-08" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Locale::RecodeData \- Abstract Base Class for Charset Converters
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&    # For compatibility with Perl 5.005 and earlier, you must
\&    # *use* the module before inheriting from it!
\&    use qw (Locale::RecodeData);
\&    use base qw (Locale::RecodeData);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module \fBLocale::RecodeData\fR serves as an abstract base class to
all converters used by \fILocale::Recode\fR\|(3).
.PP
Adding new conversion modules is currently not straightforward, and 
you will have to edit the sources of some modules for that purpose.
.PP
First, you have to add your new converter class to the list found
in \fILocale::_Conversions\fR\|(3), so that \fILocale::Recode\fR\|(3) knows about
its presence.  If there are valid aliases for the codeset of your
converter, you will also have to edit \fILocale::_Aliases\fR\|(3).
.PP
Finally, you have to implement the (protected) conversion routine
\&\fI_recode()\fR.  See below (\*(L"\s-1INTERFACE\*(R"\s0) for details.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "\fBnew (from => \s-1FROM_CODESET,\s0 to => \s-1TO_CODESET\s0)\fR" 4
.IX Item "new (from => FROM_CODESET, to => TO_CODESET)"
The constructor takes two (named) arguments:
.RS 4
.IP "\fBfrom\fR" 8
.IX Item "from"
The canonical name of the source codeset.  Aliases have already been
resolved and the name is converted to uppercase.
.IP "\fBto\fR" 8
.IX Item "to"
The canonical name of the destination codeset.  Aliases have already been
resolved and the name is converted to uppercase.
.RE
.RS 4
.Sp
You normally don't have to implement the constructor.  The default constructor
implemented here will store the source and destination codesets in the
protected members \f(CW\*(C`_from\*(C'\fR and \f(CW\*(C`_to\*(C'\fR.
.RE
.SH "METHODS"
.IX Header "METHODS"
The class implements one method:
.IP "\fB_getError\fR" 4
.IX Item "_getError"
Returns the (protected) member \f(CW\*(C`_error\*(C'\fR.
.SH "INTERFACE"
.IX Header "INTERFACE"
New conversion classes must provide the following interface:
.IP "\fBnew (from => \s-1FROM_CODESET,\s0 to => \s-1TO_CODESET\s0)\fR" 4
.IX Item "new (from => FROM_CODESET, to => TO_CODESET)"
The constructor takes two (named) arguments:
.RS 4
.IP "\fBfrom\fR" 8
.IX Item "from"
The canonical name of the source codeset.  Aliases have already been
resolved and the name is converted to uppercase.
.IP "\fBto\fR" 8
.IX Item "to"
The canonical name of the destination codeset.  Aliases have already been
resolved and the name is converted to uppercase.
.RE
.RS 4
.RE
.IP "\fB_getError\fR" 4
.IX Item "_getError"
Should return the last error (as a string) or false if there was no error.
.Sp
This method is implemented in the base class already.
.IP "\fB_recode \s-1STRINGREF\s0\fR" 4
.IX Item "_recode STRINGREF"
Should convert the argument \f(CW\*(C`STRINGREF\*(C'\fR in-place.  In case of failure,
return false, and make provisions that the method \f(CW\*(C`_getError()\*(C'\fR returns
an informative error message.
.SH "AUTHOR"
.IX Header "AUTHOR"
Copyright (C) 2002\-2017 Guido Flohr <http://www.guido-flohr.net/>
(<mailto:guido.flohr@cantanea.com>), all rights reserved.  See the source
code for details!code for details!
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fILocale::Recode::_Aliases\fR\|(3pm), \fILocale::Recode::_Conversions\fR\|(3pm),
\&\fILocale::Recode\fR\|(3pm), \fIperl\fR\|(1)
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 174:" 4
.IX Item "Around line 174:"
=cut found outside a pod block.  Skipping to next block.
